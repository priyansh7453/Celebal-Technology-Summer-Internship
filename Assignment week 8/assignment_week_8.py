# -*- coding: utf-8 -*-
"""Assignment Week_8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ziz3qCbb_Cx__ZSHwfzwAkdycx4ZVy5S
"""

!pip install langchain transformers faiss-cpu sentence-transformers pandas langchain-community
# If using OpenAI or another API-based LLM:
!pip install openai

import pandas as pd
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_community.llms import HuggingFacePipeline
import transformers
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain.text_splitter import CharacterTextSplitter

# 1. Load and prepare data with chunking
df = pd.read_csv("Training Dataset.csv")

# Convert each row to text and chunk them
text_splitter = CharacterTextSplitter(
    chunk_size=300,
    chunk_overlap=50,
    separator="\n"
)

# Prepare knowledge base with chunking
documents = []
for _, row in df.iterrows():
    text = str(row.to_dict())
    docs = text_splitter.split_text(text)
    documents.extend(docs)

# 2. Initialize embeddings
model_name = "sentence-transformers/all-MiniLM-L6-v2"
embeddings = HuggingFaceEmbeddings(
    model_name=model_name,
    model_kwargs={'device': 'cpu'}  # Explicitly set to CPU
)

# 3. Create vector store
vector_store = FAISS.from_texts(documents, embeddings)
vector_store.save_local("loan_approval_faiss_index")

# 4. Initialize LLM with proper tokenizer settings
llm_model = "google/flan-t5-small"
tokenizer = transformers.AutoTokenizer.from_pretrained(
    llm_model,
    model_max_length=512  # Set max length explicitly
)
model = transformers.AutoModelForSeq2SeqLM.from_pretrained(llm_model)
pipe = transformers.pipeline(
    "text2text-generation",
    model=model,
    tokenizer=tokenizer,
    max_length=256  # Limit output length
)
llm = HuggingFacePipeline(pipeline=pipe)

# 5. Create QA chain with updated LangChain syntax
prompt_template = """Answer the question based on the loan approval data.
Focus on the most relevant factors and provide a concise answer.

Context: {context}

Question: {question}
Answer in 2-3 sentences:"""
PROMPT = PromptTemplate(
    template=prompt_template,
    input_variables=["context", "question"]
)

qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=vector_store.as_retriever(
        search_kwargs={"k": 2}  # Retrieve fewer documents
    ),
    chain_type_kwargs={"prompt": PROMPT},
    return_source_documents=False
)

# 6. Updated query function
def ask_question(question):
    try:
        # Use the new recommended invoke() method
        result = qa_chain.invoke({"query": question})
        return result["result"]
    except Exception as e:
        return f"Error processing question: {str(e)}"

# Example usage
questions = [
    "What factors typically lead to loan approval?",
    "How does credit history affect loan approval?",
    "What income level is usually required?",
    # Basic Loan Approval Questions
    "What are the main requirements for getting a loan approved?",
    "How important is employment status for loan approval?",
    "Does age affect loan approval decisions?",
    "What documentation is typically required for loan approval?",

    #Financial Factor Questions
    "How does debt-to-income ratio impact loan approval?",
    "What is the minimum credit score needed for loan approval?",
    "How do lenders evaluate income for loan approval?",
    "Does having savings affect loan approval chances?",

      # Demographic Factor Questions
    "How does marital status affect loan approval rates?",
    "Do loan approval rates differ between male and female applicants?",
    "How does the number of dependents influence loan approval?",
    "Are there differences in approval rates between urban and rural applicants?",

    # Loan-Specific Questions
    "What loan amount ranges are most commonly approved?",
    "How does loan term length affect approval chances?",
    "Are secured loans easier to get approved than unsecured loans?",
    "What types of collateral improve loan approval odds?",
]

for q in questions:
    print(f"Q: {q}")
    print(f"A: {ask_question(q)}\n")



