# -*- coding: utf-8 -*-
"""Iris Dataset Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ixZRXKulVbmiq4Ox6DDC-xY6b8dq4cKb

# Name -->   Priyansh Kushwaha
# dataset --> Iris
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Iris.csv')

df.head()

df = df.drop('Id',axis=1)
df.head()

df.describe()

df.info()

df["Species"].value_counts()

"""#Preprocessing the dataset"""

df.isnull().sum()

"""#Exploratory Data Analysis"""

# plt.hist(df['SepalLengthCm'])
df['SepalLengthCm'].hist()

# plt.hist(df['SepalWidthCm'])
df['SepalWidthCm'].hist()

# plt.hist(df['PetalLengthCm'])
df['PetalLengthCm'].hist()

# plt.hist(df['PetalWidthCm'])
df['PetalWidthCm'].hist()

# scatterplot
colors = ['red','green','blue']
species = ['Iris-setosa','Iris-versicolor','Iris-virginica']

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['SepalLengthCm'], x['SepalWidthCm'], c = colors[i], label=species[i])
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['PetalLengthCm'], x['PetalWidthCm'], c = colors[i], label=species[i])
plt.xlabel("Petal Length")
plt.ylabel("Petal Width")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['SepalLengthCm'], x['PetalLengthCm'], c = colors[i], label=species[i])
plt.xlabel("Sepal Length")
plt.ylabel("Petal Length")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['SepalWidthCm'], x['PetalWidthCm'], c = colors[i], label=species[i])
plt.xlabel("Sepal Width")
plt.ylabel("Petal Width")
plt.legend()

"""#Coorelation Matrix"""

df.drop('Species',axis=1,inplace=False)

df

df.corr()

corr = df.corr()
fig, ax = plt.subplots(figsize=(5,4))
sns.heatmap(corr, annot=True, ax=ax, cmap = 'coolwarm')

"""#Model Training"""

from sklearn.model_selection import train_test_split
# train - 70
# test - 30
X = df.drop(columns=['Species'])
Y = df['Species']
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.30)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(x_train,y_train)

# print metric to get performance
print("Accuracy: ",model.score(x_test, y_test) * 100)

# knn - k-nearest neighbours
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()

model.fit(x_train,y_train)

# print metric to get performance
print("Accuracy: ",model.score(x_test, y_test) * 100)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()

model.fit(x_train,y_train)

print("Accuracy: ",model.score(x_test, y_test) * 100)